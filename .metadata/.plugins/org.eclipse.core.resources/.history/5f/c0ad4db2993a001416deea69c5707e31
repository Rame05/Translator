package utilities;

public class FileRecognisedService {
	public void DocxToText(String fileName){
		
	}
	
	private const String ContentTypeNamespace =
	        @"http://schemas.openxmlformats.org/package/2006/content-types";

	    private const String WordprocessingMlNamespace =
	        @"http://schemas.openxmlformats.org/wordprocessingml/2006/main";

	    private const String DocumentXmlXPath =
	        "/t:Types/t:Override[@ContentType="" +
	        "application/vnd.openxmlformats-officedocument." +
	        "wordprocessingml.document.main+xml\"]";

	    private const String BodyXPath = "/w:document/w:body";

	    private String docxFile = "";
	    private String docxFileLocation = "";

	    public DocxToText(String fileName)
	    {
	        docxFile = fileName;
	    }

	    #region ExtractText()
	    /// 
	    /// Extracts text from the Docx file.
	    /// 
	    /// Extracted text.
	    public String ExtractText()
	    {
	        if (String.IsNullOrEmpty(docxFile))
	            throw new Exception("Input file not specified.");

	        // Usually it is "/word/document.xml"

	        docxFileLocation = FindDocumentXmlLocation();

	        if (String.IsNullOrEmpty(docxFileLocation))
	            throw new Exception("It is not a valid Docx file.");

	        return ReadDocumentXml();
	    }
	    #endregion

	    #region FindDocumentXmlLocation()
	    /// 
	    /// Gets location of the "document.xml" zip entry.
	    /// 
	    /// Location of the "document.xml".
	    private String FindDocumentXmlLocation()
	    {
	        ZipFile zip = new ZipFile(docxFile);
	        foreach (ZipEntry entry in zip)
	        {
	            // Find "[Content_Types].xml" zip entry

	            if (String.Compare(entry.Name, "[Content_Types].xml", true) == 0)
	            {
	                Stream contentTypes = zip.GetInputStream(entry);

	                XmlDocument xmlDoc = new XmlDocument();
	                xmlDoc.PreserveWhitespace = true;
	                xmlDoc.Load(contentTypes);
	                contentTypes.Close();

	                //Create an XmlNamespaceManager for resolving namespaces

	                XmlNamespaceManager nsmgr = 
	                    new XmlNamespaceManager(xmlDoc.NameTable);
	                nsmgr.AddNamespace("t", ContentTypeNamespace);

	                // Find location of "document.xml"

	                XmlNode node = xmlDoc.DocumentElement.SelectSingleNode(
	                    DocumentXmlXPath, nsmgr);

	                if (node != null)
	                {
	                    String location = 
	                        ((XmlElement) node).GetAttribute("PartName");
	                    return location.TrimStart(new char[] {'/'});
	                }
	                break;
	            }
	        }
	        zip.Close();
	        return null;
	    }
	    #endregion

	    #region ReadDocumentXml()
	    /// 
	    /// Reads "document.xml" zip entry.
	    /// 
	    /// Text containing in the document.
	    private String ReadDocumentXml()
	    {
	        StringBuilder sb = new StringBuilder();

	        ZipFile zip = new ZipFile(docxFile);
	        foreach (ZipEntry entry in zip)
	        {
	            if (String.Compare(entry.Name, docxFileLocation, true) == 0)
	            {
	                Stream documentXml = zip.GetInputStream(entry);

	                XmlDocument xmlDoc = new XmlDocument();
	                xmlDoc.PreserveWhitespace = true;
	                xmlDoc.Load(documentXml);
	                documentXml.Close();

	                XmlNamespaceManager nsmgr = 
	                    new XmlNamespaceManager(xmlDoc.NameTable);
	                nsmgr.AddNamespace("w", WordprocessingMlNamespace);

	                XmlNode node = 
	                    xmlDoc.DocumentElement.SelectSingleNode(BodyXPath,nsmgr);

	                if (node == null)
	                    return String.Empty;

	                sb.Append(ReadNode(node));

	                break;
	            }
	        }
	        zip.Close();
	        return sb.ToString();
	    }
	    #endregion

	    #region ReadNode()
	    /// 
	    /// Reads content of the node and its nested childs.
	    /// 
	    /// XmlNode.
	    /// Text containing in the node.
	    private String ReadNode(XmlNode node)
	    {
	        if (node == null || node.NodeType != XmlNodeType.Element)
	            return String.Empty;

	        StringBuilder sb = new StringBuilder();
	        foreach (XmlNode child in node.ChildNodes)
	        {
	            if (child.NodeType != XmlNodeType.Element) continue;

	            switch (child.LocalName)
	            {
	                case "t":                           // Text
	                    sb.Append(child.InnerText.TrimEnd());

	                    String space = 
	                        ((XmlElement)child).GetAttribute("xml:space");
	                    if (!String.IsNullOrEmpty(space) && 
	                        space == "preserve")
	                        sb.Append(' ');

	                    break;

	                case "cr":                          // Carriage return
	                case "br":                          // Page break
	                    sb.Append(Environment.NewLine);
	                    break;

	                case "tab":                         // Tab
	                    sb.Append("\t");
	                    break;

	                case "p":                           // Paragraph
	                    sb.Append(ReadNode(child));
	                    sb.Append(Environment.NewLine);
	                    sb.Append(Environment.NewLine);
	                    break;

	                default:
	                    sb.Append(ReadNode(child));
	                    break;
	            }
	        }
	        return sb.ToString();
	    }
	    #endregion
}
